import os, re, copy

def apath(*args):
    return os.path.abspath(os.path.join(*args))

dirname = apath(os.path.dirname(__file__))
# print(dirname)

suite_files = [fn for fn in os.listdir(dirname) if 'suite' in fn]

add_test_template = """
CU_add_test({suite_name}, "{msg}", {func_name})
"""

add_suite_template = """
CU_pSuite {suite_name} = NULL;

{suite_name} = CU_add_suite("{suite_name}", init_{suite_name}, clean_{suite_name});
if (NULL == {suite_name}) {{
CU_cleanup_registry();
return CU_get_error();
}}

int add_tests_flag =
{add_tests_flag}
;

if (add_tests_flag) {{
CU_cleanup_registry();
return CU_get_error();
}}
"""

full_code_template = """// this file autogenerated by gettests.py (psqq)
#include <CUnit/Basic.h>
#include <stdio.h>
#include <string.h>

{suite_codes}

int main() {{

  /* initialize the CUnit test registry */
  if (CUE_SUCCESS != CU_initialize_registry())
    return CU_get_error();

  {create_suites}

  /* Run all tests using the CUnit Basic interface */
  CU_basic_set_mode(CU_BRM_VERBOSE);
  CU_basic_run_tests();
  CU_cleanup_registry();
  return CU_get_error();
}}
"""

def read_suite(fn):
    fn_basename = os.path.basename(fn)
    suite_name, _ = os.path.splitext(fn_basename)
    with open(fn, "r") as f:
        lines = f.readlines()
    tests = []
    q = 0
    cur_test = { "suite_name": suite_name }
    for line in lines:
        if q == 0:
            m = re.match("// test:\s*(.*)", line)
            if m:
                cur_test["msg"] = m.groups()[0]
                q = 1
        elif q == 1:
            m = re.match(r"^\s*void\s*(\w*)", line)
            if m:
                cur_test["func_name"] = m.groups()[0]
                tests.append(copy.copy(cur_test))
                # print(cur_test)
                q = 0
    res = {
        "code": "".join(lines),
        "suite_name": suite_name,
        "tests": tests,
    }
    return res


def full_code():
    suite_codes = ""
    create_suites = ""
    for fn in suite_files:
        suite = read_suite(fn)
        suite_codes += "\n" + suite["code"] + "\n"
        add_tests_flag = []
        for i, test in enumerate(suite["tests"]):
            s = add_test_template.format(**test)
            # print(s)
            add_tests_flag.append("(NULL == {})".format(s))
        add_tests_flag = " || ".join(add_tests_flag)
        # print(add_tests_flag)
        create_suites += add_suite_template.format(**suite, add_tests_flag=add_tests_flag)
    return full_code_template.format(suite_codes=suite_codes, create_suites=create_suites)


# read_suite("/home/ps/sandbox/diplom/code.c/tests/suite1.c")
print(full_code())
